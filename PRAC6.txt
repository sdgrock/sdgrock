ENTITY FRAMEWORK:

csdl

conceptual schema definition

ssdl

storage schema definition language

msl

mapping storage language

solution_explorer

PROJECT: EMPLOYMENT MANAGEMENT SYSTEM:

create table EmpMgmtSystem(EmpID int Primary Key,EmpName varchar(20),City varchar(20),DeptName varchar(20),DateOfJoin date);
insert into EmpMgmtSystem values(101,'Ram','Kolkata','FS','2017-12-17');
insert into EmpMgmtSystem values(102,'Sam','Bangalore','ACIS','2017-12-14');
insert into EmpMgmtSystem values(103,'Riya','Hyderabad','ACIS','2017-11-05');
insert into EmpMgmtSystem values(104,'Sonal','Mumbai','FS','2017-10-10');
insert into EmpMgmtSystem values(105,'Tani','Pune','ACIS','2017-11-07');

go
CREATE PROCEDURE [dbo].[uspAddEmp] 
	
	(
	@ipv_iEmpID int,
	@ipv_vcEmpName varchar(20),
	@ipv_vcCity varchar(20),
	@ipv_vcDeptName varchar(20),
	@ipv_dtDateOfJoin date
	)
	
AS
	insert into EmpMgmtSystem(EmpID,EmpName,City,DeptName,DateOfJoin) Values(@ipv_iEmpID,@ipv_vcEmpName,@ipv_vcCity,@ipv_vcDeptName,@ipv_dtDateOfJoin)
	RETURN

	go
CREATE PROCEDURE [dbo].[uspDeleteEmp] 
	
	(
	@ipv_iEmpID int
	
	)
	
AS
	Delete from EmpMgmtSystem where EmpID = @ipv_iEmpID;
	RETURN

	go
	CREATE PROCEDURE [dbo].[uspShowAll] 
	/*
	(
	@parameter1 int = 5,
	@parameter2 datatype OUTPUT
	)
	*/
AS
	select EmpID,EmpName,City,DeptName,DateOfJoin from EmpMgmtSystem;
	RETURN

	go
	CREATE PROCEDURE [dbo].[uspSearchEmp] 
	
	(
	@ipv_iEmpID int
	
	)
	
AS
		select EmpID,EmpName,City,DeptName,DateOfJoin from EmpMgmtSystem where EmpID = @ipv_iEmpID;
	RETURN

	go
	CREATE PROCEDURE [dbo].[uspUpdateEmp] 
	(
	@ipv_iEmpID int,
	@ipv_vcEmpName varchar(20),
	@ipv_vcCity varchar(20),
	@ipv_vcDeptName varchar(20),
	@ipv_dtDateOfJoin date
	)
AS
	update EmpMgmtSystem set EmpName = @ipv_vcEmpName,City = @ipv_vcCity, DeptName = @ipv_vcDeptName, DateOfJoin = @ipv_dtDateOfJoin where EmpID = @ipv_iEmpID;
	RETURN


ENTITY:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CEntity
{
    public class EmpEnt
    {
        public int EmpID { get; set; }
        public string EmpName { get; set; }
        public string City { get; set; }
        public string DeptName { get; set; }
        public DateTime DateOfJoin { get; set; }
    }
}


DAL:

MAIN PROGRAM-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.Common;
using CEntity;
using CException;


namespace CDal
{
    public class empDal
    {
        public bool AddEmpDAL(EmpEnt newEmp)
        {
            bool EmpAdded = false;
            try
            {
                DbCommand command = DalDataCon.CreateCommand();
                command.CommandText = "uspAddEmp";

                DbParameter param = command.CreateParameter();

                param.ParameterName = "@ipv_iEmpID";
                param.DbType = DbType.Int32;
                param.Value = newEmp.EmpID;
                command.Parameters.Add(param);


                param = command.CreateParameter();
                param.ParameterName = "@ipv_vcEmpName";
                param.DbType = DbType.String;
                param.Value = newEmp.EmpName;
                command.Parameters.Add(param);


                param = command.CreateParameter();
                param.ParameterName = "@ipv_vcCity";
                param.DbType = DbType.String;
                param.Value = newEmp.City;
                command.Parameters.Add(param);

                param = command.CreateParameter();
                param.ParameterName = "@ipv_vcDeptName";
                param.DbType = DbType.String;
                param.Value = newEmp.DeptName;
                command.Parameters.Add(param);



                param = command.CreateParameter();
                param.ParameterName = "@ipv_dtDateOfJoin";
                param.DbType = DbType.DateTime;
                param.Value = newEmp.DateOfJoin;
                command.Parameters.Add(param);


                int affectedRows = DalDataCon.ExecuteNonQueryCommand(command);

                if (affectedRows > 0)
                    EmpAdded = true;
            }
            catch (DbException ex)
            {
                string errormessage;

                switch (ex.ErrorCode)
                {
                    case -2146232060:
                        errormessage = "Database Does NotExists Or AccessDenied";
                        break;
                    default:
                        errormessage = ex.Message;
                        break;
                }
                throw new Exceptions(errormessage);
            }
            return EmpAdded;

        }

        public List<EmpEnt> ShowAllDAL()
        {
            List<EmpEnt> EmpList = null;
            try
            {
                DbCommand command = DalDataCon.CreateCommand();
                command.CommandText = "uspShowAll";



                DataTable dataTable = DalDataCon.ExecuteSelectCommand(command);
                if (dataTable.Rows.Count > 0)
                {
                    EmpList = new List<EmpEnt>();
                    for (int rowCounter = 0; rowCounter < dataTable.Rows.Count; rowCounter++)
                    {
                        EmpEnt emp = new EmpEnt();
                        emp.EmpID = (int)dataTable.Rows[rowCounter][0];
                        emp.EmpName = (string)dataTable.Rows[rowCounter][1];
                        emp.City = (string)dataTable.Rows[rowCounter][2];
                        emp.DeptName = (string)dataTable.Rows[rowCounter][3];
                        emp.DateOfJoin = (DateTime)dataTable.Rows[rowCounter][4];
                        EmpList.Add(emp);
                    }
                }
            }
            catch (DbException ex)
            {
                throw new Exceptions(ex.Message);
            }
            return EmpList;
        }

        public EmpEnt SearchEmpDAL(int searchEmpID)
        {
            EmpEnt searchEmp = null;
            try
            {
                DbCommand command = DalDataCon.CreateCommand();
                command.CommandText = "uspSearchEmp";

                DbParameter param = command.CreateParameter();
                param.ParameterName = "@ipv_iEmpID";
                param.DbType = DbType.Int32;
                param.Value = searchEmpID;
                command.Parameters.Add(param);

                DataTable dataTable = DalDataCon.ExecuteSelectCommand(command);
                if (dataTable.Rows.Count > 0)
                {
                    searchEmp = new EmpEnt();
                    searchEmp.EmpID = (int)dataTable.Rows[0][0];
                    searchEmp.EmpName = (string)dataTable.Rows[0][1];
                    searchEmp.City = (string)dataTable.Rows[0][2];
                    searchEmp.DeptName = (string)dataTable.Rows[0][3];
                    searchEmp.DateOfJoin = (DateTime)dataTable.Rows[0][4];

                }
            }
            catch (DbException ex)
            {
                throw new Exceptions(ex.Message);
            }
            return searchEmp;
        }

        public bool UpdateEmpDAL(EmpEnt updateEmp)
        {
            bool empUpdated = false;
            try
            {
                DbCommand command = DalDataCon.CreateCommand();
                command.CommandText = "uspUpdateEmp";

                DbParameter param = command.CreateParameter();
                param.ParameterName = "@ipv_iEmpID";
                param.DbType = DbType.Int32;
                param.Value = updateEmp.EmpID;
                command.Parameters.Add(param);


                param = command.CreateParameter();
                param.ParameterName = "@ipv_vcEmpName";
                param.DbType = DbType.String;
                param.Value = updateEmp.EmpName;
                command.Parameters.Add(param);


                param = command.CreateParameter();
                param.ParameterName = "@ipv_vcCity";
                param.DbType = DbType.String;
                param.Value = updateEmp.City;
                command.Parameters.Add(param);



                param = command.CreateParameter();
                param.ParameterName = "@ipv_vcDeptName";
                param.DbType = DbType.String;
                param.Value = updateEmp.DeptName;
                command.Parameters.Add(param);



                param = command.CreateParameter();
                param.ParameterName = "@ipv_dtDateOfJoin";
                param.DbType = DbType.DateTime;
                param.Value = updateEmp.DateOfJoin;
                command.Parameters.Add(param);

                int affectedRows = DalDataCon.ExecuteNonQueryCommand(command);

                if (affectedRows > 0)
                    empUpdated = true;
            }
            catch (DbException ex)
            {
                throw new Exceptions(ex.Message);
            }
            return empUpdated;

        }

        public bool DeleteEmpDAL(int deleteEmpID)
        {
            bool empDeleted = false;
            try
            {
                DbCommand command = DalDataCon.CreateCommand();
                command.CommandText = "uspDeleteEmp";

                DbParameter param = command.CreateParameter();
                param.ParameterName = "@ipv_iEmpID";
                param.DbType = DbType.Int32;
                param.Value = deleteEmpID;
                command.Parameters.Add(param);

                int affectedRows = DalDataCon.ExecuteNonQueryCommand(command);

                if (affectedRows > 0)
                    empDeleted = true;
            }
            catch (DbException ex)
            {
                throw new Exceptions(ex.Message);
            }
            return empDeleted;

        }
    }
}

DAL CONFIG-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Configuration;

namespace CDal
{
    public class DalConfig
    {
         private static string providerName;

        public static string ProviderName
        {
            get { return DalConfig.providerName; }
            set { DalConfig.providerName = value; }
        }
        private static string connectionString;

        public static string ConnectionString
        {
            get { return DalConfig.connectionString; }
            set { DalConfig.connectionString = value; }
        }

        static DalConfig()
        {
            providerName = ConfigurationManager.ConnectionStrings["Training"].ProviderName;
            connectionString = ConfigurationManager.ConnectionStrings["Training"].ConnectionString;
        }
    }
}

DAL CONNECTION-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.Common;

namespace CDal
{
    class DalDataCon
    {
        //Creates and prepare a new DBCommand object on a new Connection
        public static DbCommand CreateCommand()
        {
            //Obtain the database provider name
            string dataProviderName = DalConfig.ProviderName;

            //Obtain the database ConnectionString
            string connectionString = DalConfig.ConnectionString;

            //Create a New Data Provider Factory
            DbProviderFactory factory = DbProviderFactories.GetFactory(dataProviderName);

            //Obtain the Database specific connection object
            DbConnection connection = factory.CreateConnection();

            //Set the Connection string
            connection.ConnectionString = connectionString;

            //Create a Database specific command Object
            DbCommand command = connection.CreateCommand();

            //Set the command Type to Stored Procedure
            command.CommandType = CommandType.StoredProcedure;

            //Return the Initialized Command Object
            return command;
        }

        // Execute a select command and returns Records as DataTable
        public static DataTable ExecuteSelectCommand(DbCommand command)
        {
            //The Datatable to be returned
            DataTable dataTable = null;
            //Execute the command making sure the connection gets closed in the end
            try
            {
                //open the connection
                command.Connection.Open();
                //Execute the Command and store the results in a datatable
                DbDataReader dataReader = command.ExecuteReader();
                dataTable = new DataTable();
                dataTable.Load(dataReader);
                //Close the reader
                dataReader.Close();
            }
            catch (DbException ex)
            {
                throw ex;
            }
            finally
            {
                //Close the Connection
                if (command.Connection.State == ConnectionState.Open)
                    command.Connection.Close();
            }
            return dataTable;
        }

        // execute an update, delete, or insert command 
        // and return the number of affected rows
        public static int ExecuteNonQueryCommand(DbCommand command)
        {
            // The number of affected rows 
            int affectedRows = -1;
            // Execute the command making sure the connection gets closed in the end
            try
            {
                // Open the connection of the command
                command.Connection.Open();
                // Execute the command and get the number of affected rows
                affectedRows = command.ExecuteNonQuery();
            }
            catch (DbException ex)
            {
                throw ex;
            }
            finally
            {
                //Close the Connection
                if (command.Connection.State == ConnectionState.Open)
                    command.Connection.Close();
            }
            // return the number of affected rows
            return affectedRows;
        }

        // execute a select command and return a single result as a string
        public static object ExecuteScalarCommand(DbCommand command)
        {

            // The value to be returned 
            object result = null;
            // Execute the command making sure the connection gets closed in the end
            try
            {
                // Open the connection of the command
                command.Connection.Open();
                // Execute the command and get the aggregate value
                result = command.ExecuteScalar();
            }
            catch (DbException ex)
            {
                throw ex;
            }

            finally
            {
                //Close the Connection
                if (command.Connection.State == ConnectionState.Open)
                    command.Connection.Close();
            }
            // return the result
            return result;
        }
    }
}

BAL-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CDal;
using CEntity;
using CException;

namespace CBal
{
    public class empBal
    {
        private static bool ValidateEmployee(EmpEnt emp)
        {
            StringBuilder sb = new StringBuilder();
            bool validEmp = true;
            if (emp.EmpID <= 0)
            {
                validEmp = false;
                sb.Append(Environment.NewLine + "Invalid Employee ID");

            }
            if (emp.EmpName == string.Empty)
            {
                validEmp = false;
                sb.Append(Environment.NewLine + "Employee Name Required");

            }

            if (emp.City == string.Empty)
            {
                validEmp = false;
                sb.Append(Environment.NewLine + "City Required");

            }
            if (emp.DeptName == string.Empty)
            {
                validEmp = false;
                sb.Append(Environment.NewLine + "Department Name Required");

            }
            if (emp.DateOfJoin > DateTime.Today)
            {
                validEmp = false;
                sb.Append(Environment.NewLine + "Invalid input");

            }
            if (validEmp == false)
                throw new Exceptions(sb.ToString());
            return validEmp;
        }

        public static bool AddEmpBL(EmpEnt newEmp)
        {
            bool empAdded = false;
            try
            {
                if (ValidateEmployee(newEmp))
                {
                    empDal empDAL = new empDal();
                    empAdded = empDAL.AddEmpDAL(newEmp);
                }
            }
            catch (Exceptions)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return empAdded;
        }

        public static List<EmpEnt> GetAllEmpBL()
        {
            List<EmpEnt> empList = null;
            try
            {
                empDal empDAL = new empDal();
                empList = empDAL.ShowAllDAL();
            }
            catch (Exceptions ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return empList;
        }

        public static EmpEnt SearchEmpBL(int searchEmpID)
        {
            EmpEnt searchEmp = null;
            try
            {
                empDal empDAL = new empDal();
                searchEmp = empDAL.SearchEmpDAL(searchEmpID);
            }
            catch (Exceptions ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return searchEmp;

        }

        public static bool UpdateEmpBL(EmpEnt updateEmp)
        {
            bool empUpdated = false;
            try
            {
                if (ValidateEmployee(updateEmp))
                {
                    empDal guestDAL = new empDal();
                    empUpdated = guestDAL.UpdateEmpDAL(updateEmp);
                }
            }
            catch (Exceptions)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return empUpdated;
        }

        public static bool DeleteEmpBL(int deleteEmpID)
        {
            bool empDeleted = false;
            try
            {
                if (deleteEmpID > 0)
                {
                    empDal empDAL = new empDal();
                    empDeleted = empDAL.DeleteEmpDAL(deleteEmpID);
                }
                else
                {
                    throw new Exceptions("Invalid Guest ID");
                }
            }
            catch (Exceptions)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return empDeleted;
        }
    }
}


EXCEPTION-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CException
{
    public class Exceptions : ApplicationException
    {
        public Exceptions()
            : base()
        {
        }

        public Exceptions(string message)
            : base(message)
        {
        }
        public Exceptions(string message, Exception innerException)
            : base(message, innerException)
        {
        }
    }
}


XAML-

<Window x:Class="DemoWpf.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="EMPLOYMENT MANAGEMENT SYSTEM" Height="470" Width="725" FontWeight="Bold">
    <Grid>
        <Label Content="EMPLOYMENT ID :" HorizontalAlignment="Left" Margin="47,35,0,0" VerticalAlignment="Top" Height="26" Width="141" FontWeight="Bold"/>
        <Label Content="EMPLOYMENT NAME :" HorizontalAlignment="Left" Margin="47,81,0,0" VerticalAlignment="Top" Height="26" Width="141" FontWeight="Bold"/>
        <Label Content="CITY :" HorizontalAlignment="Left" Margin="47,138,0,0" VerticalAlignment="Top" RenderTransformOrigin="0.504,-0.127" Height="26" Width="141" FontWeight="Bold"/>
        <Label Content="DEPARTMENT NAME :" HorizontalAlignment="Left" Margin="47,191,0,0" VerticalAlignment="Top" Height="26" Width="141" FontWeight="Bold"/>
        <Label Content="DATE OF JOIN :" HorizontalAlignment="Left" Margin="47,246,0,0" VerticalAlignment="Top" Width="141" FontWeight="Bold"/>
        <TextBox x:Name="textid" HorizontalAlignment="Left" Height="23" Margin="228,38,0,0" TextWrapping="Wrap" Text=" " VerticalAlignment="Top" Width="120"/>
        <TextBox x:Name="textname" HorizontalAlignment="Left" Height="23" Margin="228,81,0,0" TextWrapping="Wrap" Text=" " VerticalAlignment="Top" Width="120"/>
        <TextBox x:Name="textcity" HorizontalAlignment="Left" Height="23" Margin="228,141,0,0" TextWrapping="Wrap" Text=" " VerticalAlignment="Top" Width="120"/>
        <TextBox x:Name="textdept" HorizontalAlignment="Left" Height="23" Margin="228,194,0,0" TextWrapping="Wrap" Text=" " VerticalAlignment="Top" Width="120"/>
        <DatePicker x:Name="date" HorizontalAlignment="Left" Margin="228,248,0,0" VerticalAlignment="Top" RenderTransformOrigin="0.67,1.918" Width="120"/>
        <Button Content="ADD" HorizontalAlignment="Left" Margin="65,344,0,0" VerticalAlignment="Top" Width="75" Click="Button_Click_5"/>
        <Button Content="SEARCH" HorizontalAlignment="Left" Margin="244,344,0,0" VerticalAlignment="Top" Width="75" Click="Button_Click_2"/>
        <Button Content="DELETE" HorizontalAlignment="Left" Margin="420,344,0,0" VerticalAlignment="Top" Width="75" Click="Button_Click_4"/>
        <Button Content="UPDATE" HorizontalAlignment="Left" Margin="584,344,0,0" VerticalAlignment="Top" Width="75" Click="Button_Click_3"/>
        <Button Content="SHOW ALL DATA" HorizontalAlignment="Left" Margin="533,10,0,0" VerticalAlignment="Top" Width="126" Click="Button_Click_1"/>
        <DataGrid x:Name="dataGrid" HorizontalAlignment="Left" Margin="405,66,0,0" VerticalAlignment="Top" Height="206" Width="254" SelectionChanged="dataGrid_SelectionChanged"/>
        <Label x:Name="label" Content="WELCOME" HorizontalAlignment="Left" Margin="47,404,0,0" VerticalAlignment="Top" Width="129"/>

    </Grid>
</Window>

XAML_CS-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using CException;
using CEntity;
using CBal;

namespace DemoWpf
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            List<EmpEnt> empList = empBal.GetAllEmpBL();
            dataGrid.ItemsSource = empList;
        }

        private void dataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            EmpEnt obj = (EmpEnt)(object)dataGrid.SelectedItem;
            textid.Text = obj.EmpID.ToString();
            textname.Text = obj.EmpName;
            textcity.Text = obj.City;
            textdept.Text = obj.DeptName;
            date.SelectedDate = obj.DateOfJoin;
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            try
            {
                int searchEmpID=Convert.ToInt32(textid.Text);


                EmpEnt searchEmp = empBal.SearchEmpBL(searchEmpID);
                if (searchEmp != null)
                {
                     textname.Text = searchEmp.EmpName ;
                     textcity.Text = searchEmp.City;
                     textdept.Text = searchEmp.DeptName;
                     date.SelectedDate = searchEmp.DateOfJoin;
                     
                     label.Content = "Employee Details Available";
                     
                }
                else
                {
                    label.Content="No Employee Details Available";
                }

            }
            catch (Exceptions ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        //update
        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            try
            {
                int updateEmpID=Convert.ToInt32(textid.Text);
  
                EmpEnt updatedEmp = empBal.SearchEmpBL(updateEmpID);
                if (updatedEmp != null)
                {

                    updatedEmp.EmpName = textname.Text;
                    updatedEmp.City = textcity.Text;
                    updatedEmp.DeptName = textdept.Text;
                    updatedEmp.DateOfJoin = (DateTime)date.SelectedDate;

                    
                    bool guestUpdated = empBal.UpdateEmpBL(updatedEmp);
                    if (guestUpdated)
                        label.Content=("Employee Details Updated");
                    else
                        label.Content = ("Employee Details not Updated ");
                }
                else
                {
                    label.Content = ("No Employee Details Available");
                }


            }
            catch (Exceptions ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        //delete
        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            try
            {
                int deleteEmpID = Convert.ToInt32(textid.Text);
               
                
                EmpEnt deleteGuest = empBal.SearchEmpBL(deleteEmpID);
                if (deleteGuest != null)
                {
                    bool empdeleted = empBal.DeleteEmpBL(deleteEmpID);
                    if (empdeleted)
                        label.Content= ("Employee Deleted");
                    else
                        label.Content = ("Employee not Deleted ");
                }
                else
                {
                    MessageBox.Show("No Employee Details Available");
                }


            }
            catch (Exceptions ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        //add
        private void Button_Click_5(object sender, RoutedEventArgs e)
        {
            try
            {
                EmpEnt newEmp = new EmpEnt();

                newEmp.EmpID = Convert.ToInt32(textid.Text);
                newEmp.EmpName = textname.Text;         
                newEmp.City = textcity.Text;
                newEmp.DeptName = textdept.Text;
                newEmp.DateOfJoin = (DateTime)date.SelectedDate;

                bool empAdded = empBal.AddEmpBL(newEmp);
                if (empAdded)
                    label.Content = ("Employee Added");
                else
                    label.Content = ("Employee not Added");
            }
            catch (Exceptions ex)
            {
                label.Content=(ex.Message);
            }
        }
    }
}

