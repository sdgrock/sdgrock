TODAY 07.12.2017

//AUDIO VIDEO CALL DISPLAY USING EVENT HANDLER

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication10
{

    enum callType {Audio, Video}
    class CallEventArgs : EventArgs
    {
        public callType callType;

        public CallEventArgs()
        {
            Random r = new Random();
            callType = r.Next() % 2 == 0 ?
                callType.Audio : callType.Video;
        }
    }

    class Mobile
    {
        public string MobileName { get; set; }
        public delegate void CallEvent(object o, CallEventArgs ce);
        public event CallEvent CallRings;

        public Mobile(string mobileName)
        {
            MobileName = mobileName;
        }

        public void OnCallRing()
        {
            if (CallRings != null)
            {
                CallRings(this, new CallEventArgs());
            }
        }
    }

    class DemoEventArgs
    {
        static void Main(string[] args)
        {
            Mobile SamsungMobile = new Mobile("Samsung Note 8");
            Mobile IPhoneMobile = new Mobile("IPhone 8");
            SamsungMobile.CallRings += MyMobileRings;
            IPhoneMobile.CallRings += MyMobileRings;
            SamsungMobile.OnCallRing();
            IPhoneMobile.OnCallRing();
            Console.ReadLine();
        }

        public static void MyMobileRings(Object o, CallEventArgs ce)
        {
            Console.WriteLine("My {0} mobile gets a {1} call...",((Mobile)o).MobileName, ce.callType) ;
        }
    }
}


//WPF APPLICATION
(welcome message display)

xaml:
<Window x:Class="WpfApplication1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="356.757" Width="538.514">
    <Grid Margin="-2,0,2,0">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="95*"/>
            <ColumnDefinition Width="165*"/>
            <ColumnDefinition Width="153*"/>
            <ColumnDefinition Width="118*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="82*"/>
            <RowDefinition Height="83*"/>
            <RowDefinition Height="87*"/>
            <RowDefinition Height="75*"/>
        </Grid.RowDefinitions>
        <Button Grid.ColumnSpan="2" Content="Button" Grid.Column="1" HorizontalAlignment="Left" Margin="108,26,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="Button_Click_1"/>

    </Grid>
</Window>

CS FILE:

private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Welcome to WPF");
        }


//STACK PANEL CREATION AND CHANGING LAYOUT

XAML:

<Window x:Class="WpfApplication1.DemoStackPanel"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="DemoStackPanel" Height="300" Width="300">
    <StackPanel Name="stackPanel1" HorizontalAlignment="Left" Height="270" VerticalAlignment="Top" Width="292">
        <Label Content="A Stack Button" HorizontalAlignment="Center" Margin="0,10,0,20"/>
        <Button Content="Button" RenderTransformOrigin="0.5,0.5" Margin="5"/>
        <Button Content="Button" Margin="5"/>
        <Button Content="Button" RenderTransformOrigin="0.494,3.204" Margin="5"/>
        <Button Content="Button" Margin="5"/>
        <CheckBox Height="22" HorizontalAlignment="Center" Margin="5" Content="Change Layout" Checked="CheckBox_Checked_1" Unchecked="CheckBox_Unchecked_1"/>
    </StackPanel>
</Window>

CS FILE:(GO TO EVENTS AND WRITE THE NAME IN THE UNCHECKED BOX)

  private void CheckBox_Checked_1(object sender, RoutedEventArgs e)
        {
            stackPanel1.Orientation = Orientation.Horizontal;
        }

        private void CheckBox_Unchecked_1(object sender, RoutedEventArgs e)
        {
            stackPanel1.Orientation = Orientation.Vertical;
        }

IN APP.XAML, CHANGE THE PROGRAM NAME( StartupUri="DemoStackPanel.xaml">) 


//COLOR CHANGE AND ALIGNMENT OF DIFFERENT BUTTONS
(INSIDE A WRAP PANEL)

<Window x:Class="WpfApplication1.DemoWrapPanel"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="DemoWrapPanel" Height="300" Width="500">
    <Grid>
        <WrapPanel HorizontalAlignment="Left" Height="260" VerticalAlignment="Top" Width="461" Margin="10,0,0,0">
            <Button Content="Button1" Width="75" MinHeight="70" OpacityMask="Black" BorderBrush="#FF935E5E" RenderTransformOrigin="0.5,0.5">
                <Button.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleY="1" ScaleX="1"/>
                        <SkewTransform AngleY="12" AngleX="14"/>
                        <RotateTransform Angle="0"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Button.RenderTransform>
                <Button.Background>
                    <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                        <GradientStop Color="#FFF3F3F3"/>
                        <GradientStop Color="#FF010A44" Offset="0.5"/>
                        <GradientStop Color="#FF388B19" Offset="0.256"/>
                        <GradientStop Color="#FFEE220E" Offset="0.773"/>
                        <GradientStop Color="#FFE9E9E9" Offset="0.996"/>
                        <GradientStop Color="#FFEAEAEA"/>
                        <GradientStop Color="#FF0D423D" Offset="1"/>
                        <GradientStop Color="#FFDC3C3C"/>
                    </LinearGradientBrush>
                </Button.Background>
                <Button.Foreground>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="Black" Offset="0"/>
                        <GradientStop Color="#FFB0E245" Offset="1"/>
                    </LinearGradientBrush>
                </Button.Foreground>
            </Button>
            <Button Content="Button2" Width="75" VerticalAlignment="Top" >
                <Button.Background>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#FF1B934C" Offset="0"/>
                        <GradientStop Color="#FFEBEBEB" Offset="0.5"/>
                        <GradientStop Color="#FF832346" Offset="0.5"/>
                        <GradientStop Color="#FFCDCDCD" Offset="1"/>
                    </LinearGradientBrush>
                </Button.Background>
            </Button>
            <Button Content="Button3" Width="75" VerticalAlignment="Bottom">
                <Button.Background>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#FFF3F3F3" Offset="0"/>
                        <GradientStop Color="#FF2E101B"/>
                        <GradientStop Color="#FFCDCDCD" Offset="1"/>
                    </LinearGradientBrush>
                </Button.Background>
            </Button>
            <Button Content="Button4" Width="75" VerticalAlignment="Center" Foreground="#FFB00E0E" Background="#FFD3C32C"/>
        </WrapPanel>

    </Grid>
</Window>

//GRID

<Window x:Class="WpfApplication1.WinGrid"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="WinGrid" Height="300" Width="300">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="43*"/>
            <RowDefinition Height="47*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="147*"/>
            <ColumnDefinition Width="145*"/>
        </Grid.ColumnDefinitions>
        <Button Content="Button1" Grid.Row="0" Grid.Column="0"/>
        <Button Content="Button2" Grid.Row="0" Grid.Column="1"/>
        <Button Content="Button3" Grid.Row="1" Grid.Column="1"/>
        <Button Content="Button4" Grid.Row="1" Grid.Column="0"/>

    </Grid>
</Window>

//BACKGROUND COLOUR
(ADD IMAGE IN FOLDER IN THE PROJECT)

<Window.Background>
        <ImageBrush ImageSource="Images/Tulips.jpg"></ImageBrush>
    </Window.Background>

//HORIZONTAL AND VERTICAL SPLITTER

<Window x:Class="WpfApplication1.splitter"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="splitter" Height="300" Width="300">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="130" />
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="130"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="100"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition MinWidth="50"/>
        </Grid.ColumnDefinitions>
        <Button Content="Button1" Grid.Row="0" Grid.Column="0"/>
        <Button Content="Button2" Grid.Row="0" Grid.Column="2"/>
        <Button Content="Button3" Grid.Row="2" Grid.Column="0"/>
        <Button Content="Button4" Grid.Row="2" Grid.Column="2"></Button>
        <GridSplitter Grid.Row="0" ShowsPreview="False" VerticalAlignment="Stretch" HorizontalAlignment="Center"  Grid.RowSpan="2" Width="3" Grid.Column="1"/>
        <GridSplitter Grid.ColumnSpan="3"  ShowsPreview="False" HorizontalAlignment="Stretch" Height="4" VerticalAlignment="Center" Grid.Row="1" Grid.Column="0"/>

    </Grid>

</Window>

//AFTER PICTURE INSERTION IN BUTTON

<Window x:Class="WpfApplication1.splitter"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="splitter" Height="300" Width="300">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="130" />
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="130"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="100"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition MinWidth="50"/>
        </Grid.ColumnDefinitions>
        <Button Grid.Row="0" Grid.Column="0">
            <Image Source="Images/Penguins.jpg" Stretch="Fill"></Image>
        </Button>
        <Button Grid.Row="0" Grid.Column="2">
            <Image Source="Images/Lighthouse.jpg" Stretch="Fill"></Image>
        </Button>
        <Button Grid.Row="2" Grid.Column="0">
            <Image Source="Images/Jellyfish.jpg" Stretch="Fill"></Image>
        </Button>
        <Button Grid.Row="2" Grid.Column="2">
            <Image Source="Images/Desert.jpg" Stretch="Fill"></Image>
        </Button>
        <GridSplitter Grid.Row="0" ShowsPreview="False" VerticalAlignment="Stretch" HorizontalAlignment="Center"  Grid.RowSpan="2" Width="3" Grid.Column="1"/>
        <GridSplitter Grid.ColumnSpan="3"  ShowsPreview="False" HorizontalAlignment="Stretch" Height="4" VerticalAlignment="Center" Grid.Row="1" Grid.Column="0"/>

    </Grid>

</Window> 


//COMBOBOX MESSAGE DISPLAY

private void ComboBox_SelectionChanged_1(object sender, SelectionChangedEventArgs e)
        {
            StackPanel sp = (StackPanel)cmb1.SelectedItem;
            foreach (Object c in sp.Children)
            {
                if (c is Label)
                    MessageBox.Show(((Label)c).Content.ToString());
            }

        }



